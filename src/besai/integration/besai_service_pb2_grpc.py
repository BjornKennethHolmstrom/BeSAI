# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from besai.integration import besai_service_pb2 as besai__service__pb2


class BeSAIServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ProcessInput = channel.unary_unary(
                '/besai.BeSAIService/ProcessInput',
                request_serializer=besai__service__pb2.InputRequest.SerializeToString,
                response_deserializer=besai__service__pb2.OutputResponse.FromString,
                )
        self.ExploreGRPC = channel.unary_unary(
                '/besai.BeSAIService/ExploreGRPC',
                request_serializer=besai__service__pb2.ExploreRequest.SerializeToString,
                response_deserializer=besai__service__pb2.ExploreResponse.FromString,
                )
        self.GenerateInsight = channel.unary_unary(
                '/besai.BeSAIService/GenerateInsight',
                request_serializer=besai__service__pb2.InsightRequest.SerializeToString,
                response_deserializer=besai__service__pb2.InsightResponse.FromString,
                )
        self.PerformReasoning = channel.unary_unary(
                '/besai.BeSAIService/PerformReasoning',
                request_serializer=besai__service__pb2.ReasoningRequest.SerializeToString,
                response_deserializer=besai__service__pb2.ReasoningResponse.FromString,
                )


class BeSAIServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ProcessInput(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExploreGRPC(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GenerateInsight(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PerformReasoning(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BeSAIServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ProcessInput': grpc.unary_unary_rpc_method_handler(
                    servicer.ProcessInput,
                    request_deserializer=besai__service__pb2.InputRequest.FromString,
                    response_serializer=besai__service__pb2.OutputResponse.SerializeToString,
            ),
            'ExploreGRPC': grpc.unary_unary_rpc_method_handler(
                    servicer.ExploreGRPC,
                    request_deserializer=besai__service__pb2.ExploreRequest.FromString,
                    response_serializer=besai__service__pb2.ExploreResponse.SerializeToString,
            ),
            'GenerateInsight': grpc.unary_unary_rpc_method_handler(
                    servicer.GenerateInsight,
                    request_deserializer=besai__service__pb2.InsightRequest.FromString,
                    response_serializer=besai__service__pb2.InsightResponse.SerializeToString,
            ),
            'PerformReasoning': grpc.unary_unary_rpc_method_handler(
                    servicer.PerformReasoning,
                    request_deserializer=besai__service__pb2.ReasoningRequest.FromString,
                    response_serializer=besai__service__pb2.ReasoningResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'besai.BeSAIService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class BeSAIService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ProcessInput(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/besai.BeSAIService/ProcessInput',
            besai__service__pb2.InputRequest.SerializeToString,
            besai__service__pb2.OutputResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ExploreGRPC(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/besai.BeSAIService/ExploreGRPC',
            besai__service__pb2.ExploreRequest.SerializeToString,
            besai__service__pb2.ExploreResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GenerateInsight(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/besai.BeSAIService/GenerateInsight',
            besai__service__pb2.InsightRequest.SerializeToString,
            besai__service__pb2.InsightResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PerformReasoning(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/besai.BeSAIService/PerformReasoning',
            besai__service__pb2.ReasoningRequest.SerializeToString,
            besai__service__pb2.ReasoningResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
